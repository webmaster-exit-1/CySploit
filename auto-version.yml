name: Auto-Versioning

on:
  push:
    branches: [main, master]
    paths:
      - '**/*.ts'
      - '**/*.tsx'
      - '**/*.js'
      - '**/*.jsx'
      - 'package.json'
      - 'package-lock.json'
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version type (patch, minor, major)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  version-and-tag:
    runs-on: ubuntu-latest
    # Skip this job if commit message includes [skip-version]
    if: "!contains(github.event.head_commit.message, '[skip-version]')"
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Configure Git
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
      
      - name: Determine version update type
        id: version_type
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "type=${{ github.event.inputs.version_type }}" >> $GITHUB_OUTPUT
          else
            # Default to patch for regular pushes
            echo "type=patch" >> $GITHUB_OUTPUT
          fi
      
      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
      
      - name: Update version
        id: update_version
        run: |
          VERSION_TYPE="${{ steps.version_type.outputs.type }}"
          
          # Extract version components
          CURRENT_VERSION="${{ steps.current_version.outputs.version }}"
          MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
          MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
          PATCH=$(echo $CURRENT_VERSION | cut -d. -f3)
          
          # Calculate new version
          if [ "$VERSION_TYPE" == "major" ]; then
            NEW_VERSION="$((MAJOR + 1)).0.0"
          elif [ "$VERSION_TYPE" == "minor" ]; then
            NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
          else # patch
            NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
          fi
          
          # Update package.json
          npm version $NEW_VERSION --no-git-tag-version
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
      
      - name: Commit and push version update
        run: |
          NEW_VERSION="${{ steps.update_version.outputs.new_version }}"
          git add package.json package-lock.json
          git commit -m "chore: bump version to v$NEW_VERSION [skip-version]"
          git push
      
      - name: Create tag
        run: |
          NEW_VERSION="${{ steps.update_version.outputs.new_version }}"
          git tag -a "v$NEW_VERSION" -m "Version $NEW_VERSION"
          git push --tags
      
      - name: Create release notes
        id: release_notes
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -z "$PREVIOUS_TAG" ]; then
            # If no previous tag exists, get all commits
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            # Get commits since the previous tag
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges $PREVIOUS_TAG..HEAD)
          fi
          
          # Save changelog to a file
          echo "$CHANGELOG" > changelog.md
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.update_version.outputs.new_version }}
          name: Release v${{ steps.update_version.outputs.new_version }}
          body_path: changelog.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}