import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from '@/components/ui/card';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { useNetworkScanner } from '@/lib/hooks/useNetworkScanner';
import { useVulnerabilityScanner } from '@/lib/hooks/useVulnerabilityScanner';
import { Device, Vulnerability } from '@/lib/types';
import { cn } from '@/lib/utils';
import { Helmet } from 'react-helmet';
import NeonBorder from '@/components/common/NeonBorder';
import { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip } from 'recharts';
import { Progress } from '@/components/ui/progress';
import { useToast } from '@/hooks/use-toast';
import VulnerabilitiesTable from '@/components/dashboard/VulnerabilitiesTable';

const VulnerabilityScanner: React.FC = () => {
  const { devices, isLoadingDevices } = useNetworkScanner();
  const { 
    vulnerabilities, 
    isLoadingVulnerabilities, 
    scanVulnerabilitiesMutation, 
    getVulnerabilityCounts,
    scanInProgress
  } = useVulnerabilityScanner();
  
  const [selectedDeviceId, setSelectedDeviceId] = useState<string>('');
  const [scanLevel, setScanLevel] = useState<string>('basic');
  const [scanResults, setScanResults] = useState<any>(null);
  const [progress, setProgress] = useState(0);
  
  const { toast } = useToast();
  
  // Set page title
  useEffect(() => {
    document.title = 'Vulnerability Scanner | CySploit';
  }, []);
  
  // Simulate progress when scanning
  useEffect(() => {
    if (scanInProgress) {
      setProgress(0);
      const interval = setInterval(() => {
        setProgress(prev => {
          if (prev >= 95) {
            clearInterval(interval);
            return prev;
          }
          return prev + 5;
        });
      }, 300);
      
      return () => clearInterval(interval);
    } else {
      setProgress(100);
    }
  }, [scanInProgress]);
  
  const handleScanVulnerabilities = async () => {
    if (!selectedDeviceId) {
      toast({
        title: "Invalid Selection",
        description: "Please select a device to scan",
        variant: "destructive"
      });
      return;
    }
    
    try {
      const result = await scanVulnerabilitiesMutation.mutateAsync(parseInt(selectedDeviceId));
      setScanResults(result);
      
      toast({
        title: "Vulnerability Scan Complete",
        description: `Found ${result.vulnerabilitiesFound} vulnerabilities`
      });
    } catch (error) {
      toast({
        title: "Scan Failed",
        description: error instanceof Error ? error.message : "Unknown error occurred",
        variant: "destructive"
      });
    }
  };
  
  // Prepare vulnerability statistics for charts
  const prepareVulnerabilityChartData = () => {
    if (!vulnerabilities) return [];
    
    const counts = getVulnerabilityCounts(vulnerabilities);
    
    return [
      { name: 'Critical', value: counts.critical, color: '#FF3366' },
      { name: 'High', value: counts.high, color: '#FF9500' },
      { name: 'Medium', value: counts.medium, color: '#FFCC00' },
      { name: 'Low', value: counts.low, color: '#AAAAAA' }
    ].filter(item => item.value > 0);
  };
  
  // Prepare device vulnerability counts
  const prepareDeviceVulnerabilityData = () => {
    if (!vulnerabilities || !devices) return [];
    
    const deviceVulnCounts: Record<number, { 
      deviceId: number, 
      ipAddress: string,
      deviceName: string,
      count: number,
      criticalCount: number
    }> = {};
    
    // Count vulnerabilities by device
    vulnerabilities.forEach((vuln: Vulnerability) => {
      if (!deviceVulnCounts[vuln.deviceId]) {
        const device = devices.find((d: Device) => d.id === vuln.deviceId);
        deviceVulnCounts[vuln.deviceId] = {
          deviceId: vuln.deviceId,
          ipAddress: device?.ipAddress || 'Unknown',
          deviceName: device?.deviceName || 'Unknown device',
          count: 0,
          criticalCount: 0
        };
      }
      
      deviceVulnCounts[vuln.deviceId].count += 1;
      if (vuln.severity === 'critical') {
        deviceVulnCounts[vuln.deviceId].criticalCount += 1;
      }
    });
    
    return Object.values(deviceVulnCounts).sort((a, b) => b.count - a.count);
  };
  
  const chartData = prepareVulnerabilityChartData();
  const deviceVulnData = prepareDeviceVulnerabilityData();

  return (
    <>
      <Helmet>
        <title>Vulnerability Scanner | CySploit</title>
        <meta name="description" content="Scan your network devices for security vulnerabilities and get detailed reports" />
      </Helmet>
      
      {/* Page Header */}
      <div className="mb-8">
        <h1 className="text-3xl font-bold font-rajdhani text-white mb-2">Vulnerability <span className="text-secondary">Scanner</span></h1>
        <p className="text-gray-400">Identify and analyze security vulnerabilities in your network devices</p>
      </div>
      
      {/* Scan Controls */}
      <NeonBorder color="magenta" className="mb-8">
        <CardHeader>
          <CardTitle className="font-rajdhani">Scan Configuration</CardTitle>
          <CardDescription>
            Select a device and scan level to scan for vulnerabilities
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label className="text-sm text-gray-400 mb-2 block">Select Device</label>
              <Select value={selectedDeviceId} onValueChange={setSelectedDeviceId}>
                <SelectTrigger>
                  <SelectValue placeholder="Select a device to scan" />
                </SelectTrigger>
                <SelectContent>
                  {isLoadingDevices ? (
                    <SelectItem value="loading" disabled>Loading devices...</SelectItem>
                  ) : devices && devices.length > 0 ? (
                    devices.map((device: Device) => (
                      <SelectItem key={device.id} value={device.id.toString()}>
                        {device.ipAddress} - {device.deviceName || device.deviceType || 'Unknown device'}
                      </SelectItem>
                    ))
                  ) : (
                    <SelectItem value="none" disabled>No devices found</SelectItem>
                  )}
                </SelectContent>
              </Select>
            </div>
            
            <div>
              <label className="text-sm text-gray-400 mb-2 block">Scan Level</label>
              <Select value={scanLevel} onValueChange={setScanLevel}>
                <SelectTrigger>
                  <SelectValue placeholder="Select scan level" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="basic">Basic Scan (Quick)</SelectItem>
                  <SelectItem value="deep">Deep Scan (Thorough)</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
          
          {scanInProgress && (
            <div className="mt-6">
              <div className="flex justify-between text-sm mb-2">
                <span className="text-gray-400">Scanning for vulnerabilities...</span>
                <span className="text-primary">{progress}%</span>
              </div>
              <Progress value={progress} />
            </div>
          )}
        </CardContent>
        <CardFooter>
          <Button 
            onClick={handleScanVulnerabilities} 
            disabled={!selectedDeviceId || scanInProgress}
            className="w-full"
          >
            {scanInProgress ? (
              <>
                <i className="ri-loader-4-line animate-spin mr-2"></i>
                Scanning...
              </>
            ) : (
              <>
                <i className="ri-shield-check-line mr-2"></i>
                Scan for Vulnerabilities
              </>
            )}
          </Button>
        </CardFooter>
      </NeonBorder>
      
      {/* Results Dashboard */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8">
        {/* Vulnerability Statistics */}
        <NeonBorder color="cyan">
          <CardHeader>
            <CardTitle className="font-rajdhani">Vulnerability Statistics</CardTitle>
            <CardDescription>
              Overview of detected vulnerabilities by severity
            </CardDescription>
          </CardHeader>
          <CardContent>
            {isLoadingVulnerabilities ? (
              <div className="flex justify-center items-center h-60">
                <p className="text-gray-400">Loading statistics...</p>
              </div>
            ) : chartData.length > 0 ? (
              <ResponsiveContainer width="100%" height={250}>
                <PieChart>
                  <Pie
                    data={chartData}
                    cx="50%"
                    cy="50%"
                    innerRadius={60}
                    outerRadius={80}
                    paddingAngle={5}
                    dataKey="value"
                    label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}
                    labelLine={false}
                  >
                    {chartData.map((entry, index) => (
                      <Cell key={`cell-${index}`} fill={entry.color} />
                    ))}
                  </Pie>
                  <Tooltip 
                    formatter={(value: number) => [`${value} vulnerabilities`, 'Count']}
                    contentStyle={{ 
                      backgroundColor: 'rgba(13, 17, 23, 0.9)', 
                      border: '1px solid #323B4F',
                      borderRadius: '0.25rem'
                    }}
                  />
                  <Legend />
                </PieChart>
              </ResponsiveContainer>
            ) : (
              <div className="flex justify-center items-center h-60">
                <p className="text-gray-400">No vulnerabilities detected</p>
              </div>
            )}
          </CardContent>
        </NeonBorder>
        
        {/* Most Vulnerable Devices */}
        <NeonBorder color="purple" className="col-span-2">
          <CardHeader>
            <CardTitle className="font-rajdhani">Most Vulnerable Devices</CardTitle>
            <CardDescription>
              Devices ranked by number of vulnerabilities
            </CardDescription>
          </CardHeader>
          <CardContent>
            {isLoadingVulnerabilities ? (
              <div className="flex justify-center items-center h-60">
                <p className="text-gray-400">Loading device data...</p>
              </div>
            ) : deviceVulnData.length > 0 ? (
              <div className="space-y-4">
                {deviceVulnData.slice(0, 5).map((device) => (
                  <div key={device.deviceId} className="bg-background rounded-lg p-4">
                    <div className="flex justify-between items-start mb-2">
                      <div>
                        <h3 className="font-medium text-white">{device.deviceName}</h3>
                        <p className="text-sm text-gray-400">{device.ipAddress}</p>
                      </div>
                      <div className="text-right">
                        <span className="text-xl font-bold text-white">{device.count}</span>
                        <p className="text-sm text-gray-400">vulnerabilities</p>
                      </div>
                    </div>
                    <div className="flex justify-between items-center">
                      <div className="w-full mr-4">
                        <Progress 
                          value={100} 
                          className="h-2 bg-gray-800"
                          indicatorClassName={cn(
                            device.criticalCount > 0 ? "bg-destructive" : "bg-yellow-500"
                          )}
                        />
                      </div>
                      {device.criticalCount > 0 && (
                        <span className="text-sm text-destructive">
                          {device.criticalCount} critical
                        </span>
                      )}
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="flex justify-center items-center h-60">
                <p className="text-gray-400">No vulnerabilities detected</p>
              </div>
            )}
          </CardContent>
        </NeonBorder>
      </div>
      
      {/* Vulnerabilities Table */}
      <VulnerabilitiesTable maxItems={10} showPagination={true} />
      
      {/* Scan Results */}
      {scanResults && (
        <NeonBorder color="magenta" className="mt-8">
          <CardHeader>
            <CardTitle className="font-rajdhani">Last Scan Results</CardTitle>
            <CardDescription>
              Vulnerability scan results for the selected device
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              <div className="bg-background p-4 rounded-lg">
                <p className="text-sm text-gray-400">Vulnerabilities Found</p>
                <p className="text-2xl font-bold text-white">{scanResults.vulnerabilitiesFound}</p>
              </div>
              <div className="bg-background p-4 rounded-lg">
                <p className="text-sm text-gray-400">Session ID</p>
                <p className="text-2xl font-bold text-white">{scanResults.sessionId}</p>
              </div>
              <div className="bg-background p-4 rounded-lg">
                <p className="text-sm text-gray-400">Scan Level</p>
                <p className="text-2xl font-bold text-white">
                  {scanLevel.charAt(0).toUpperCase() + scanLevel.slice(1)}
                </p>
              </div>
              <div className="bg-background p-4 rounded-lg">
                <p className="text-sm text-gray-400">Status</p>
                <p className="text-2xl font-bold text-secondary">Completed</p>
              </div>
            </div>
          </CardContent>
        </NeonBorder>
      )}
    </>
  );
};

export default VulnerabilityScanner;
