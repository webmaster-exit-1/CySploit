name: Build and Release

on:
  push:
    tags:
      - 'v*'
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch:
    inputs:
      force_release:
        description: 'Force a release build'
        required: false
        default: false
        type: boolean

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Check repository structure
        id: repo_check
        run: |
          echo "Repository Structure:"
          echo "====================="
          find . -maxdepth 2 -type d | sort
          
          # Check for package.json locations
          echo -e "\nChecking for package.json files:"
          find . -name "package.json" -type f | sort
          
          # Check for build and dist directories
          echo -e "\nChecking for build and dist directories:"
          find . -name "build" -o -name "dist" -type d | sort
    
  build:
    needs: prepare
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest]  # Reduced to just Ubuntu for now
        node-version: [18.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      # Check if package.json exists before running npm commands
      - name: Check package.json
        id: check_files
        run: |
          if [ -f "package.json" ]; then
            echo "package_json_exists=true" >> $GITHUB_OUTPUT
          else
            echo "package_json_exists=false" >> $GITHUB_OUTPUT
            echo "Warning: package.json not found in root directory"
            
            # Look for package.json in subdirectories
            PACKAGE_PATHS=$(find . -name "package.json" -type f | sort)
            if [ -n "$PACKAGE_PATHS" ]; then
              echo "Found package.json in these locations:"
              echo "$PACKAGE_PATHS"
            fi
          fi

      - name: Install dependencies (if package.json exists)
        if: steps.check_files.outputs.package_json_exists == 'true'
        run: npm ci
      
      - name: Build web application (if build script exists)
        if: steps.check_files.outputs.package_json_exists == 'true'
        run: |
          if grep -q "\"build\"" package.json; then
            npm run build
          else
            echo "No build script found in package.json, skipping"
          fi
        env:
          NODE_ENV: production
      
      - name: Create artifacts directory if it doesn't exist
        run: mkdir -p artifacts
        
      - name: Collect available artifacts
        run: |
          # Find and copy any build outputs to artifacts directory
          find . -path "*/dist/*" -type f -exec cp -t artifacts/ {} \; 2>/dev/null || true
          find . -path "*/build/*" -type f -exec cp -t artifacts/ {} \; 2>/dev/null || true
          
          # List what we found
          echo "Collected artifacts:"
          ls -la artifacts/ || echo "No artifacts found"
      
      - name: Upload collected artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: artifacts/
          if-no-files-found: ignore
          retention-days: 5

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.force_release == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Get version info
        id: package_version
        run: |
          if [ -f "package.json" ]; then
            VERSION=$(node -p "require('./package.json').version" || echo "1.0.0")
          else
            VERSION="1.0.0"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: release-files
          
      - name: Display downloaded files
        run: |
          echo "Files available for release:"
          find release-files -type f | sort
          
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: release-files/**/*
          tag_name: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || format('v{0}', steps.package_version.outputs.version) }}
          name: CySploit ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || format('v{0}', steps.package_version.outputs.version) }}
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}