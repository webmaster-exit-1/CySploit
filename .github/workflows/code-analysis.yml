name: Code Analysis

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master]
  schedule:
    - cron: '0 0 * * 0'  # Run every Sunday at midnight
  workflow_dispatch:

jobs:
  code-quality:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      security-events: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      # CodeQL Analysis
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, typescript
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
      
      # SonarCloud Analysis (Uncomment if you set up SonarCloud)
      # - name: SonarCloud Scan
      #   uses: SonarSource/sonarcloud-github-action@master
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      
      # Bundle Size Analysis
      - name: Build for bundle analysis
        run: npm run build
      
      - name: Analyze bundle size
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            
            function formatBytes(bytes, decimals = 2) {
              if (bytes === 0) return '0 Bytes';
              const k = 1024;
              const dm = decimals < 0 ? 0 : decimals;
              const sizes = ['Bytes', 'KB', 'MB', 'GB'];
              const i = Math.floor(Math.log(bytes) / Math.log(k));
              return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
            }
            
            // Get build directory
            const buildDir = path.resolve('build');
            
            // Analyze JS files
            let totalJsSize = 0;
            let jsFiles = [];
            
            function scanDirectory(dir) {
              const entries = fs.readdirSync(dir, { withFileTypes: true });
              
              for (const entry of entries) {
                const fullPath = path.join(dir, entry.name);
                
                if (entry.isDirectory()) {
                  scanDirectory(fullPath);
                } else if (entry.isFile() && entry.name.endsWith('.js')) {
                  const stats = fs.statSync(fullPath);
                  totalJsSize += stats.size;
                  jsFiles.push({
                    name: path.relative(buildDir, fullPath),
                    size: stats.size,
                    formattedSize: formatBytes(stats.size)
                  });
                }
              }
            }
            
            try {
              scanDirectory(buildDir);
              
              // Sort by size
              jsFiles.sort((a, b) => b.size - a.size);
              
              // Get top 10 largest files
              const topFiles = jsFiles.slice(0, 10);
              
              // Create markdown table
              let bundleReport = `## Bundle Size Analysis\n\n`;
              bundleReport += `Total JS Bundle Size: **${formatBytes(totalJsSize)}**\n\n`;
              bundleReport += `### Top 10 Largest Files\n\n`;
              bundleReport += `| File | Size |\n`;
              bundleReport += `| ---- | ---- |\n`;
              
              for (const file of topFiles) {
                bundleReport += `| ${file.name} | ${file.formattedSize} |\n`;
              }
              
              // Create or update comment on PR
              if (context.payload.pull_request) {
                const { data: comments } = await github.rest.issues.listComments({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.payload.pull_request.number,
                });
                
                const bundleSizeComment = comments.find(comment => 
                  comment.body.includes('## Bundle Size Analysis')
                );
                
                if (bundleSizeComment) {
                  await github.rest.issues.updateComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    comment_id: bundleSizeComment.id,
                    body: bundleReport,
                  });
                } else {
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: context.payload.pull_request.number,
                    body: bundleReport,
                  });
                }
              } else {
                // Log to console for non-PR runs
                console.log(bundleReport);
              }
            } catch (error) {
              console.error('Error analyzing bundle size:', error);
            }
