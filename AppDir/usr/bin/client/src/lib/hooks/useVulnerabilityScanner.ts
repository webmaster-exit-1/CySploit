import { useState } from 'react';
import { useMutation, useQuery } from '@tanstack/react-query';
import { apiRequest } from '@/lib/queryClient';
import { VulnerabilityScanResult, Vulnerability } from '@/lib/types';
import { queryClient } from '@/lib/queryClient';

export const useVulnerabilityScanner = () => {
  const [scanInProgress, setScanInProgress] = useState(false);

  // Get all vulnerabilities
  const { data: vulnerabilities, isLoading: isLoadingVulnerabilities } = useQuery({
    queryKey: ['/api/vulnerabilities'],
    refetchOnWindowFocus: false,
  });

  // Scan a device for vulnerabilities
  const scanVulnerabilitiesMutation = useMutation({
    mutationFn: async (deviceId: number): Promise<VulnerabilityScanResult> => {
      setScanInProgress(true);
      try {
        const response = await apiRequest('POST', '/api/scan/vulnerabilities', { deviceId });
        return await response.json();
      } finally {
        setScanInProgress(false);
      }
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/vulnerabilities'] });
      queryClient.invalidateQueries({ queryKey: ['/api/sessions'] });
    }
  });

  // Get vulnerabilities for a specific device
  const getDeviceVulnerabilities = (deviceId: number) => {
    return useQuery({
      queryKey: [`/api/devices/${deviceId}/vulnerabilities`],
      refetchOnWindowFocus: false,
    });
  };

  // Update a vulnerability (change status)
  const updateVulnerabilityMutation = useMutation({
    mutationFn: async ({ id, status }: { id: number, status: string }): Promise<Vulnerability> => {
      const response = await apiRequest('PATCH', `/api/vulnerabilities/${id}`, { status });
      return await response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/vulnerabilities'] });
    }
  });

  // Get CVE details
  const getCveDetails = (cveId: string) => {
    return useQuery({
      queryKey: [`/api/vulnerabilities/cve/${cveId}`],
      enabled: !!cveId,
      refetchOnWindowFocus: false,
    });
  };

  // Helper function to get vulnerability severity counts
  const getVulnerabilityCounts = (vulns?: Vulnerability[]) => {
    if (!vulns) return { critical: 0, high: 0, medium: 0, low: 0, total: 0 };

    const counts = {
      critical: 0,
      high: 0,
      medium: 0, 
      low: 0,
      total: vulns.length
    };

    vulns.forEach(vuln => {
      if (vuln.severity === 'critical') counts.critical++;
      else if (vuln.severity === 'high') counts.high++;
      else if (vuln.severity === 'medium') counts.medium++;
      else if (vuln.severity === 'low') counts.low++;
    });

    return counts;
  };

  return {
    vulnerabilities,
    isLoadingVulnerabilities,
    scanVulnerabilitiesMutation,
    getDeviceVulnerabilities,
    updateVulnerabilityMutation,
    getCveDetails,
    getVulnerabilityCounts,
    scanInProgress
  };
};
